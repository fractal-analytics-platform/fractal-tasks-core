{
  "manifest_version": "2",
  "task_list": [
    {
      "name": "Convert Cellvoyager to OME-Zarr",
      "executable_non_parallel": "tasks/cellvoyager_to_ome_zarr_init.py",
      "executable_parallel": "tasks/cellvoyager_to_ome_zarr_compute.py",
      "meta_non_parallel": {
        "cpus_per_task": 1,
        "mem": 4000
      },
      "meta_parallel": {
        "cpus_per_task": 1,
        "mem": 4000
      },
      "args_schema_non_parallel": {
        "$defs": {
          "OmeroChannel": {
            "description": "Custom class for Omero channels, based on OME-NGFF v0.4.",
            "properties": {
              "wavelength_id": {
                "title": "Wavelength Id",
                "type": "string"
              },
              "index": {
                "title": "Index",
                "type": "integer"
              },
              "label": {
                "title": "Label",
                "type": "string"
              },
              "window": {
                "allOf": [
                  {
                    "$ref": "#/$defs/Window"
                  }
                ]
              },
              "color": {
                "title": "Color",
                "type": "string"
              },
              "active": {
                "default": true,
                "title": "Active",
                "type": "boolean"
              },
              "coefficient": {
                "default": 1,
                "title": "Coefficient",
                "type": "integer"
              },
              "inverted": {
                "default": false,
                "title": "Inverted",
                "type": "boolean"
              }
            },
            "required": [
              "wavelength_id"
            ],
            "title": "OmeroChannel",
            "type": "object"
          },
          "Window": {
            "description": "Custom class for Omero-channel window, based on OME-NGFF v0.4.",
            "properties": {
              "min": {
                "title": "Min",
                "type": "integer"
              },
              "max": {
                "title": "Max",
                "type": "integer"
              },
              "start": {
                "title": "Start",
                "type": "integer"
              },
              "end": {
                "title": "End",
                "type": "integer"
              }
            },
            "required": [
              "start",
              "end"
            ],
            "title": "Window",
            "type": "object"
          }
        },
        "additionalProperties": false,
        "properties": {
          "zarr_urls": {
            "items": {
              "type": "string"
            },
            "title": "Zarr Urls",
            "type": "array",
            "description": "List of paths or urls to the individual OME-Zarr image to be processed. Not used by the converter task. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "zarr_dir": {
            "title": "Zarr Dir",
            "type": "string",
            "description": "path of the directory where the new OME-Zarrs will be created. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "image_dirs": {
            "items": {
              "type": "string"
            },
            "title": "Image Dirs",
            "type": "array",
            "description": "list of paths to the folders that contains the Cellvoyager image files. Each entry is a path to a folder that contains the image files themselves for a multiwell plate and the MeasurementData & MeasurementDetail metadata files."
          },
          "allowed_channels": {
            "items": {
              "$ref": "#/$defs/OmeroChannel"
            },
            "title": "Allowed Channels",
            "type": "array",
            "description": "A list of `OmeroChannel` s, where each channel must include the `wavelength_id` attribute and where the `wavelength_id` values must be unique across the list."
          },
          "image_glob_patterns": {
            "items": {
              "type": "string"
            },
            "title": "Image Glob Patterns",
            "type": "array",
            "description": "If specified, only parse images with filenames that match with all these patterns. Patterns must be defined as in https://docs.python.org/3/library/fnmatch.html, Example: `image_glob_pattern=[\"*_B03_*\"]` => only process well B03 `image_glob_pattern=[\"*_C09_*\", \"*F016*\", \"*Z[0-5][0-9]C*\"]` => only process well C09, field of view 16 and Z planes 0-59."
          },
          "num_levels": {
            "default": 5,
            "title": "Num Levels",
            "type": "integer",
            "description": "Number of resolution-pyramid levels. If set to `5`, there will be the full-resolution level and 4 levels of downsampled images."
          },
          "coarsening_xy": {
            "default": 2,
            "title": "Coarsening Xy",
            "type": "integer",
            "description": "Linear coarsening factor between subsequent levels. If set to `2`, level 1 is 2x downsampled, level 2 is 4x downsampled etc."
          },
          "image_extension": {
            "default": "tif",
            "title": "Image Extension",
            "type": "string",
            "description": "Filename extension of images (e.g. `\"tif\"` or `\"png\"`)"
          },
          "metadata_table_file": {
            "title": "Metadata Table File",
            "type": "string",
            "description": "If `None`, parse Yokogawa metadata from mrf/mlf files in the input_path folder; else, the full path to a csv file containing the parsed metadata table."
          },
          "overwrite": {
            "default": false,
            "title": "Overwrite",
            "type": "boolean",
            "description": "If `True`, overwrite the task output."
          }
        },
        "required": [
          "zarr_urls",
          "zarr_dir",
          "image_dirs",
          "allowed_channels"
        ],
        "type": "object",
        "title": "CellvoyagerToOmeZarrInit"
      },
      "args_schema_parallel": {
        "$defs": {
          "InitArgsCellVoyager": {
            "description": "Arguments to be passed from cellvoyager converter init to compute",
            "properties": {
              "image_dir": {
                "title": "Image Dir",
                "type": "string"
              },
              "plate_prefix": {
                "title": "Plate Prefix",
                "type": "string"
              },
              "well_ID": {
                "title": "Well Id",
                "type": "string"
              },
              "image_extension": {
                "title": "Image Extension",
                "type": "string"
              },
              "image_glob_patterns": {
                "items": {
                  "type": "string"
                },
                "title": "Image Glob Patterns",
                "type": "array"
              },
              "acquisition": {
                "title": "Acquisition",
                "type": "integer"
              }
            },
            "required": [
              "image_dir",
              "plate_prefix",
              "well_ID",
              "image_extension"
            ],
            "title": "InitArgsCellVoyager",
            "type": "object"
          }
        },
        "additionalProperties": false,
        "properties": {
          "zarr_url": {
            "title": "Zarr Url",
            "type": "string",
            "description": "Path or url to the individual OME-Zarr image to be processed. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "init_args": {
            "$ref": "#/$defs/InitArgsCellVoyager",
            "title": "Init Args",
            "description": "Intialization arguments provided by `create_cellvoyager_ome_zarr_init`."
          }
        },
        "required": [
          "zarr_url",
          "init_args"
        ],
        "type": "object",
        "title": "CellvoyagerToOmeZarrCompute"
      },
      "docs_info": "## cellvoyager_to_ome_zarr_init\nCreate a OME-NGFF zarr folder, without reading/writing image data.\n\nFind plates (for each folder in input_paths):\n\n- glob image files,\n- parse metadata from image filename to identify plates,\n- identify populated channels.\n\nCreate a zarr folder (for each plate):\n\n- parse mlf metadata,\n- identify wells and field of view (FOV),\n- create FOV ZARR,\n- verify that channels are uniform (i.e., same channels).\n## cellvoyager_to_ome_zarr_compute\nConvert Yokogawa output (png, tif) to zarr file.\n\nThis task is run after an init task (typically\n`cellvoyager_to_ome_zarr_init` or\n`cellvoyager_to_ome_zarr_init_multiplex`), and it populates the empty\nOME-Zarr files that were prepared.\n\nNote that the current task always overwrites existing data. To avoid this\nbehavior, set the `overwrite` argument of the init task to `False`.\n",
      "docs_link": "https://fractal-analytics-platform.github.io/fractal-tasks-core"
    },
    {
      "name": "Convert Cellvoyager Multiplexing to OME-Zarr",
      "executable_non_parallel": "tasks/cellvoyager_to_ome_zarr_init_multiplex.py",
      "executable_parallel": "tasks/cellvoyager_to_ome_zarr_compute.py",
      "meta_non_parallel": {
        "cpus_per_task": 1,
        "mem": 4000
      },
      "meta_parallel": {
        "cpus_per_task": 1,
        "mem": 4000
      },
      "args_schema_non_parallel": {
        "$defs": {
          "MultiplexingAcquisition": {
            "description": "Input class for Multiplexing Cellvoyager converter",
            "properties": {
              "image_dir": {
                "title": "Image Dir",
                "type": "string"
              },
              "allowed_channels": {
                "items": {
                  "$ref": "#/$defs/OmeroChannel"
                },
                "title": "Allowed Channels",
                "type": "array"
              }
            },
            "required": [
              "image_dir",
              "allowed_channels"
            ],
            "title": "MultiplexingAcquisition",
            "type": "object"
          },
          "OmeroChannel": {
            "description": "Custom class for Omero channels, based on OME-NGFF v0.4.",
            "properties": {
              "wavelength_id": {
                "title": "Wavelength Id",
                "type": "string"
              },
              "index": {
                "title": "Index",
                "type": "integer"
              },
              "label": {
                "title": "Label",
                "type": "string"
              },
              "window": {
                "allOf": [
                  {
                    "$ref": "#/$defs/Window"
                  }
                ]
              },
              "color": {
                "title": "Color",
                "type": "string"
              },
              "active": {
                "default": true,
                "title": "Active",
                "type": "boolean"
              },
              "coefficient": {
                "default": 1,
                "title": "Coefficient",
                "type": "integer"
              },
              "inverted": {
                "default": false,
                "title": "Inverted",
                "type": "boolean"
              }
            },
            "required": [
              "wavelength_id"
            ],
            "title": "OmeroChannel",
            "type": "object"
          },
          "Window": {
            "description": "Custom class for Omero-channel window, based on OME-NGFF v0.4.",
            "properties": {
              "min": {
                "title": "Min",
                "type": "integer"
              },
              "max": {
                "title": "Max",
                "type": "integer"
              },
              "start": {
                "title": "Start",
                "type": "integer"
              },
              "end": {
                "title": "End",
                "type": "integer"
              }
            },
            "required": [
              "start",
              "end"
            ],
            "title": "Window",
            "type": "object"
          }
        },
        "additionalProperties": false,
        "properties": {
          "zarr_urls": {
            "items": {
              "type": "string"
            },
            "title": "Zarr Urls",
            "type": "array",
            "description": "List of paths or urls to the individual OME-Zarr image to be processed. Not used by the converter task. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "zarr_dir": {
            "title": "Zarr Dir",
            "type": "string",
            "description": "path of the directory where the new OME-Zarrs will be created. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "acquisitions": {
            "additionalProperties": {
              "$ref": "#/$defs/MultiplexingAcquisition"
            },
            "title": "Acquisitions",
            "type": "object",
            "description": "dictionary of acquisitions. Each key is the acquisition identifier (normally 0, 1, 2, 3 etc.). Each item defines the acquisition by providing the image_dir and the allowed_channels."
          },
          "image_glob_patterns": {
            "items": {
              "type": "string"
            },
            "title": "Image Glob Patterns",
            "type": "array",
            "description": "If specified, only parse images with filenames that match with all these patterns. Patterns must be defined as in https://docs.python.org/3/library/fnmatch.html, Example: `image_glob_pattern=[\"*_B03_*\"]` => only process well B03 `image_glob_pattern=[\"*_C09_*\", \"*F016*\", \"*Z[0-5][0-9]C*\"]` => only process well C09, field of view 16 and Z planes 0-59."
          },
          "num_levels": {
            "default": 5,
            "title": "Num Levels",
            "type": "integer",
            "description": "Number of resolution-pyramid levels. If set to `5`, there will be the full-resolution level and 4 levels of downsampled images."
          },
          "coarsening_xy": {
            "default": 2,
            "title": "Coarsening Xy",
            "type": "integer",
            "description": "Linear coarsening factor between subsequent levels. If set to `2`, level 1 is 2x downsampled, level 2 is 4x downsampled etc."
          },
          "image_extension": {
            "default": "tif",
            "title": "Image Extension",
            "type": "string",
            "description": "Filename extension of images (e.g. `\"tif\"` or `\"png\"`)."
          },
          "metadata_table_files": {
            "additionalProperties": {
              "type": "string"
            },
            "title": "Metadata Table Files",
            "type": "object",
            "description": "If `None`, parse Yokogawa metadata from mrf/mlf files in the input_path folder; else, a dictionary of key-value pairs like `(acquisition, path)` with `acquisition` a string like the key of the `acquisitions` dict and `path` pointing to a csv file containing the parsed metadata table."
          },
          "overwrite": {
            "default": false,
            "title": "Overwrite",
            "type": "boolean",
            "description": "If `True`, overwrite the task output."
          }
        },
        "required": [
          "zarr_urls",
          "zarr_dir",
          "acquisitions"
        ],
        "type": "object",
        "title": "CellvoyagerToOmeZarrInitMultiplex"
      },
      "args_schema_parallel": {
        "$defs": {
          "InitArgsCellVoyager": {
            "description": "Arguments to be passed from cellvoyager converter init to compute",
            "properties": {
              "image_dir": {
                "title": "Image Dir",
                "type": "string"
              },
              "plate_prefix": {
                "title": "Plate Prefix",
                "type": "string"
              },
              "well_ID": {
                "title": "Well Id",
                "type": "string"
              },
              "image_extension": {
                "title": "Image Extension",
                "type": "string"
              },
              "image_glob_patterns": {
                "items": {
                  "type": "string"
                },
                "title": "Image Glob Patterns",
                "type": "array"
              },
              "acquisition": {
                "title": "Acquisition",
                "type": "integer"
              }
            },
            "required": [
              "image_dir",
              "plate_prefix",
              "well_ID",
              "image_extension"
            ],
            "title": "InitArgsCellVoyager",
            "type": "object"
          }
        },
        "additionalProperties": false,
        "properties": {
          "zarr_url": {
            "title": "Zarr Url",
            "type": "string",
            "description": "Path or url to the individual OME-Zarr image to be processed. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "init_args": {
            "$ref": "#/$defs/InitArgsCellVoyager",
            "title": "Init Args",
            "description": "Intialization arguments provided by `create_cellvoyager_ome_zarr_init`."
          }
        },
        "required": [
          "zarr_url",
          "init_args"
        ],
        "type": "object",
        "title": "CellvoyagerToOmeZarrCompute"
      },
      "docs_info": "## cellvoyager_to_ome_zarr_init_multiplex\nCreate OME-NGFF structure and metadata to host a multiplexing dataset.\n\nThis task takes a set of image folders (i.e. different multiplexing\nacquisitions) and build the internal structure and metadata of a OME-NGFF\nzarr group, without actually loading/writing the image data.\n\nEach element in input_paths should be treated as a different acquisition.\n## cellvoyager_to_ome_zarr_compute\nConvert Yokogawa output (png, tif) to zarr file.\n\nThis task is run after an init task (typically\n`cellvoyager_to_ome_zarr_init` or\n`cellvoyager_to_ome_zarr_init_multiplex`), and it populates the empty\nOME-Zarr files that were prepared.\n\nNote that the current task always overwrites existing data. To avoid this\nbehavior, set the `overwrite` argument of the init task to `False`.\n",
      "docs_link": "https://fractal-analytics-platform.github.io/fractal-tasks-core"
    },
    {
      "name": "Maximum Intensity Projection HCS Plate",
      "input_types": {
        "is_3D": true
      },
      "output_types": {
        "is_3D": false
      },
      "executable_non_parallel": "tasks/copy_ome_zarr_hcs_plate.py",
      "executable_parallel": "tasks/maximum_intensity_projection.py",
      "meta_non_parallel": {
        "cpus_per_task": 1,
        "mem": 4000
      },
      "meta_parallel": {
        "cpus_per_task": 1,
        "mem": 4000
      },
      "args_schema_non_parallel": {
        "additionalProperties": false,
        "properties": {
          "zarr_urls": {
            "items": {
              "type": "string"
            },
            "title": "Zarr Urls",
            "type": "array",
            "description": "List of paths or urls to the individual OME-Zarr image to be processed. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "zarr_dir": {
            "title": "Zarr Dir",
            "type": "string",
            "description": "path of the directory where the new OME-Zarrs will be created. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "suffix": {
            "default": "mip",
            "title": "Suffix",
            "type": "string",
            "description": "The suffix that is used to transform `plate.zarr` into `plate_suffix.zarr`. Note that `None` is not currently supported."
          },
          "overwrite": {
            "default": false,
            "title": "Overwrite",
            "type": "boolean",
            "description": "If `True`, overwrite the task output."
          }
        },
        "required": [
          "zarr_urls",
          "zarr_dir"
        ],
        "type": "object",
        "title": "CopyOmeZarrHcsPlate"
      },
      "args_schema_parallel": {
        "$defs": {
          "InitArgsMIP": {
            "description": "Init Args for MIP task.",
            "properties": {
              "origin_url": {
                "title": "Origin Url",
                "type": "string"
              }
            },
            "required": [
              "origin_url"
            ],
            "title": "InitArgsMIP",
            "type": "object"
          }
        },
        "additionalProperties": false,
        "properties": {
          "zarr_url": {
            "title": "Zarr Url",
            "type": "string",
            "description": "Path or url to the individual OME-Zarr image to be processed. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "init_args": {
            "$ref": "#/$defs/InitArgsMIP",
            "title": "Init Args",
            "description": "Intialization arguments provided by `create_cellvoyager_ome_zarr_init`."
          },
          "overwrite": {
            "default": false,
            "title": "Overwrite",
            "type": "boolean",
            "description": "If `True`, overwrite the task output."
          }
        },
        "required": [
          "zarr_url",
          "init_args"
        ],
        "type": "object",
        "title": "MaximumIntensityProjection"
      },
      "docs_info": "## copy_ome_zarr_hcs_plate\nDuplicate the OME-Zarr HCS structure for a set of zarr_urls.\n\nThis task only processes the zarr images in the zarr_urls, not all the\nimages in the plate. It copies all the  plate & well structure, but none\nof the image metadata or the actual image data:\n\n- For each plate, create a new OME-Zarr HCS plate with the attributes for\n    all the images in zarr_urls\n- For each well (in each plate), create a new zarr subgroup with the\n   same attributes as the original one.\n\nNote: this task makes use of methods from the `Attributes` class, see\nhttps://zarr.readthedocs.io/en/stable/api/attrs.html.\n## maximum_intensity_projection\nPerform maximum-intensity projection along Z axis.\n\nNote: this task stores the output in a new zarr file.\n",
      "docs_link": "https://fractal-analytics-platform.github.io/fractal-tasks-core"
    },
    {
      "name": "Illumination Correction",
      "input_types": {
        "illumination_corrected": false
      },
      "output_types": {
        "illumination_corrected": true
      },
      "executable_parallel": "tasks/illumination_correction.py",
      "meta_parallel": {
        "cpus_per_task": 1,
        "mem": 4000
      },
      "args_schema_parallel": {
        "additionalProperties": false,
        "properties": {
          "zarr_url": {
            "title": "Zarr Url",
            "type": "string",
            "description": "Path or url to the individual OME-Zarr image to be processed. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "illumination_profiles_folder": {
            "title": "Illumination Profiles Folder",
            "type": "string",
            "description": "Path of folder of illumination profiles."
          },
          "illumination_profiles": {
            "additionalProperties": {
              "type": "string"
            },
            "title": "Illumination Profiles",
            "type": "object",
            "description": "Dictionary where keys match the `wavelength_id` attributes of existing channels (e.g. `A01_C01` ) and values are the filenames of the corresponding illumination profiles."
          },
          "background": {
            "default": 0,
            "title": "Background",
            "type": "integer",
            "description": "Background value that is subtracted from the image before the illumination correction is applied. Set it to `0` if you don't want any background subtraction."
          },
          "input_ROI_table": {
            "default": "FOV_ROI_table",
            "title": "Input Roi Table",
            "type": "string",
            "description": "Name of the ROI table that contains the information about the location of the individual field of views (FOVs) to which the illumination correction shall be applied. Defaults to \"FOV_ROI_table\", the default name Fractal converters give the ROI tables that list all FOVs separately. If you generated your OME-Zarr with a different converter and used Import OME-Zarr to generate the ROI tables, `image_ROI_table` is the right choice if you only have 1 FOV per Zarr image and `grid_ROI_table` if you have multiple FOVs per Zarr image and set the right grid options during import."
          },
          "overwrite_input": {
            "default": true,
            "title": "Overwrite Input",
            "type": "boolean",
            "description": "If `True`, the results of this task will overwrite the input image data. If false, a new image is generated and the illumination corrected data is saved there."
          },
          "suffix": {
            "default": "_illum_corr",
            "title": "Suffix",
            "type": "string",
            "description": "What suffix to append to the illumination corrected images. Only relevant if `overwrite_input=False`."
          }
        },
        "required": [
          "zarr_url",
          "illumination_profiles_folder",
          "illumination_profiles"
        ],
        "type": "object",
        "title": "IlluminationCorrection"
      },
      "docs_info": "## illumination_correction\nApplies illumination correction to the images in the OME-Zarr.\n\nAssumes that the illumination correction profiles were generated before\nseparately and that the same background subtraction was used during\ncalculation of the illumination correction (otherwise, it will not work\nwell & the correction may only be partial).\n",
      "docs_link": "https://fractal-analytics-platform.github.io/fractal-tasks-core"
    },
    {
      "name": "Cellpose Segmentation",
      "executable_parallel": "tasks/cellpose_segmentation.py",
      "meta_parallel": {
        "cpus_per_task": 4,
        "mem": 16000,
        "needs_gpu": true
      },
      "args_schema_parallel": {
        "$defs": {
          "CellposeChannel1InputModel": {
            "description": "Channel input for cellpose with normalization options.",
            "properties": {
              "wavelength_id": {
                "title": "Wavelength Id",
                "type": "string"
              },
              "label": {
                "title": "Label",
                "type": "string"
              },
              "normalize": {
                "$ref": "#/$defs/CellposeCustomNormalizer"
              }
            },
            "title": "CellposeChannel1InputModel",
            "type": "object"
          },
          "CellposeChannel2InputModel": {
            "description": "Channel input for secondary cellpose channel with normalization options.",
            "properties": {
              "wavelength_id": {
                "title": "Wavelength Id",
                "type": "string"
              },
              "label": {
                "title": "Label",
                "type": "string"
              },
              "normalize": {
                "$ref": "#/$defs/CellposeCustomNormalizer"
              }
            },
            "title": "CellposeChannel2InputModel",
            "type": "object"
          },
          "CellposeCustomNormalizer": {
            "description": "Validator to handle different normalization scenarios for Cellpose models",
            "properties": {
              "type": {
                "default": "default",
                "enum": [
                  "default",
                  "custom",
                  "no_normalization"
                ],
                "title": "Type",
                "type": "string"
              },
              "lower_percentile": {
                "maximum": 100.0,
                "minimum": 0.0,
                "title": "Lower Percentile",
                "type": "number"
              },
              "upper_percentile": {
                "maximum": 100.0,
                "minimum": 0.0,
                "title": "Upper Percentile",
                "type": "number"
              },
              "lower_bound": {
                "title": "Lower Bound",
                "type": "integer"
              },
              "upper_bound": {
                "title": "Upper Bound",
                "type": "integer"
              }
            },
            "title": "CellposeCustomNormalizer",
            "type": "object"
          },
          "CellposeModelParams": {
            "description": "Advanced Cellpose Model Parameters",
            "properties": {
              "cellprob_threshold": {
                "default": 0.0,
                "title": "Cellprob Threshold",
                "type": "number"
              },
              "flow_threshold": {
                "default": 0.4,
                "title": "Flow Threshold",
                "type": "number"
              },
              "anisotropy": {
                "title": "Anisotropy",
                "type": "number"
              },
              "min_size": {
                "default": 15,
                "title": "Min Size",
                "type": "integer"
              },
              "augment": {
                "default": false,
                "title": "Augment",
                "type": "boolean"
              },
              "net_avg": {
                "default": false,
                "title": "Net Avg",
                "type": "boolean"
              },
              "use_gpu": {
                "default": true,
                "title": "Use Gpu",
                "type": "boolean"
              },
              "batch_size": {
                "default": 8,
                "title": "Batch Size",
                "type": "integer"
              },
              "invert": {
                "default": false,
                "title": "Invert",
                "type": "boolean"
              },
              "tile": {
                "default": true,
                "title": "Tile",
                "type": "boolean"
              },
              "tile_overlap": {
                "default": 0.1,
                "title": "Tile Overlap",
                "type": "number"
              },
              "resample": {
                "default": true,
                "title": "Resample",
                "type": "boolean"
              },
              "interp": {
                "default": true,
                "title": "Interp",
                "type": "boolean"
              },
              "stitch_threshold": {
                "default": 0.0,
                "title": "Stitch Threshold",
                "type": "number"
              }
            },
            "title": "CellposeModelParams",
            "type": "object"
          }
        },
        "additionalProperties": false,
        "properties": {
          "zarr_url": {
            "title": "Zarr Url",
            "type": "string",
            "description": "Path or url to the individual OME-Zarr image to be processed. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "level": {
            "title": "Level",
            "type": "integer",
            "description": "Pyramid level of the image to be segmented. Choose `0` to process at full resolution."
          },
          "channel": {
            "$ref": "#/$defs/CellposeChannel1InputModel",
            "title": "Channel",
            "description": "Primary channel for segmentation; requires either `wavelength_id` (e.g. `A01_C01`) or `label` (e.g. `DAPI`), but not both. Also contains normalization options. By default, data is normalized so 0.0=1st percentile and 1.0=99th percentile of image intensities in each channel. This automatic normalization can lead to issues when the image to be segmented is very sparse. You can turn off the default rescaling. With the \"custom\" option, you can either provide your own rescaling percentiles or fixed rescaling upper and lower bound integers."
          },
          "channel2": {
            "$ref": "#/$defs/CellposeChannel2InputModel",
            "title": "Channel2",
            "description": "Second channel for segmentation (in the same format as `channel`). If specified, cellpose runs in dual channel mode. For dual channel segmentation of cells, the first channel should contain the membrane marker, the second channel should contain the nuclear marker."
          },
          "input_ROI_table": {
            "default": "FOV_ROI_table",
            "title": "Input Roi Table",
            "type": "string",
            "description": "Name of the ROI table over which the task loops to apply Cellpose segmentation. Examples: `FOV_ROI_table` => loop over the field of views, `organoid_ROI_table` => loop over the organoid ROI table (generated by another task), `well_ROI_table` => process the whole well as one image."
          },
          "output_ROI_table": {
            "title": "Output Roi Table",
            "type": "string",
            "description": "If provided, a ROI table with that name is created, which will contain the bounding boxes of the newly segmented labels. ROI tables should have `ROI` in their name."
          },
          "output_label_name": {
            "title": "Output Label Name",
            "type": "string",
            "description": "Name of the output label image (e.g. `\"organoids\"`)."
          },
          "diameter_level0": {
            "default": 30.0,
            "title": "Diameter Level0",
            "type": "number",
            "description": "Expected diameter of the objects that should be segmented in pixels at level 0. Initial diameter is rescaled using the `level` that was selected. The rescaled value is passed as the diameter to the `CellposeModel.eval` method."
          },
          "model_type": {
            "default": "cyto2",
            "enum": [
              "cyto",
              "nuclei",
              "tissuenet",
              "livecell",
              "cyto2",
              "general",
              "CP",
              "CPx",
              "TN1",
              "TN2",
              "TN3",
              "LC1",
              "LC2",
              "LC3",
              "LC4"
            ],
            "title": "Model Type",
            "type": "string",
            "description": "Parameter of `CellposeModel` class. Defines which model should be used. Typical choices are `nuclei`, `cyto`, `cyto2`, etc."
          },
          "pretrained_model": {
            "title": "Pretrained Model",
            "type": "string",
            "description": "Parameter of `CellposeModel` class (takes precedence over `model_type`). Allows you to specify the path of a custom trained cellpose model."
          },
          "relabeling": {
            "default": true,
            "title": "Relabeling",
            "type": "boolean",
            "description": "If `True`, apply relabeling so that label values are unique for all objects in the well."
          },
          "use_masks": {
            "default": true,
            "title": "Use Masks",
            "type": "boolean",
            "description": "If `True`, try to use masked loading and fall back to `use_masks=False` if the ROI table is not suitable. Masked loading is relevant when only a subset of the bounding box should actually be processed (e.g. running within `organoid_ROI_table`)."
          },
          "advanced_cellpose_model_params": {
            "$ref": "#/$defs/CellposeModelParams",
            "title": "Advanced Cellpose Model Params",
            "description": "Advanced Cellpose model parameters that are passed to the Cellpose `model.eval` method."
          },
          "overwrite": {
            "default": true,
            "title": "Overwrite",
            "type": "boolean",
            "description": "If `True`, overwrite the task output."
          }
        },
        "required": [
          "zarr_url",
          "level",
          "channel"
        ],
        "type": "object",
        "title": "CellposeSegmentation"
      },
      "docs_info": "## cellpose_segmentation\nRun cellpose segmentation on the ROIs of a single OME-Zarr image.\n",
      "docs_link": "https://fractal-analytics-platform.github.io/fractal-tasks-core"
    },
    {
      "name": "Calculate Registration (image-based)",
      "executable_non_parallel": "tasks/image_based_registration_hcs_init.py",
      "executable_parallel": "tasks/calculate_registration_image_based.py",
      "meta_non_parallel": {
        "cpus_per_task": 1,
        "mem": 1000
      },
      "meta_parallel": {
        "cpus_per_task": 1,
        "mem": 8000
      },
      "args_schema_non_parallel": {
        "additionalProperties": false,
        "properties": {
          "zarr_urls": {
            "items": {
              "type": "string"
            },
            "title": "Zarr Urls",
            "type": "array",
            "description": "List of paths or urls to the individual OME-Zarr image to be processed. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "zarr_dir": {
            "title": "Zarr Dir",
            "type": "string",
            "description": "path of the directory where the new OME-Zarrs will be created. Not used by this task. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "reference_acquisition": {
            "default": 0,
            "title": "Reference Acquisition",
            "type": "integer",
            "description": "Which acquisition to register against. Needs to match the acquisition metadata in the OME-Zarr image."
          }
        },
        "required": [
          "zarr_urls",
          "zarr_dir"
        ],
        "type": "object",
        "title": "ImageBasedRegistrationHcsInit"
      },
      "args_schema_parallel": {
        "$defs": {
          "InitArgsRegistration": {
            "description": "Registration init args.",
            "properties": {
              "reference_zarr_url": {
                "title": "Reference Zarr Url",
                "type": "string"
              }
            },
            "required": [
              "reference_zarr_url"
            ],
            "title": "InitArgsRegistration",
            "type": "object"
          },
          "RegistrationMethod": {
            "description": "RegistrationMethod Enum class",
            "enum": [
              "phase_cross_correlation",
              "chi2_shift"
            ],
            "title": "RegistrationMethod",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "properties": {
          "zarr_url": {
            "title": "Zarr Url",
            "type": "string",
            "description": "Path or url to the individual OME-Zarr image to be processed. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "init_args": {
            "$ref": "#/$defs/InitArgsRegistration",
            "title": "Init Args",
            "description": "Intialization arguments provided by `image_based_registration_hcs_init`. They contain the reference_zarr_url that is used for registration. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "wavelength_id": {
            "title": "Wavelength Id",
            "type": "string",
            "description": "Wavelength that will be used for image-based registration; e.g. `A01_C01` for Yokogawa, `C01` for MD."
          },
          "method": {
            "allOf": [
              {
                "$ref": "#/$defs/RegistrationMethod"
              }
            ],
            "default": "phase_cross_correlation",
            "title": "Method",
            "description": "Method to use for image registration. The available methods are `phase_cross_correlation` (scikit-image package, works for 2D & 3D) and \"chi2_shift\" (image_registration package, only works for 2D images)."
          },
          "roi_table": {
            "default": "FOV_ROI_table",
            "title": "Roi Table",
            "type": "string",
            "description": "Name of the ROI table over which the task loops to calculate the registration. Examples: `FOV_ROI_table` => loop over the field of views, `well_ROI_table` => process the whole well as one image."
          },
          "level": {
            "default": 2,
            "title": "Level",
            "type": "integer",
            "description": "Pyramid level of the image to be used for registration. Choose `0` to process at full resolution."
          }
        },
        "required": [
          "zarr_url",
          "init_args",
          "wavelength_id"
        ],
        "type": "object",
        "title": "CalculateRegistrationImageBased"
      },
      "docs_info": "## image_based_registration_hcs_init\nInitialized calculate registration task\n\nThis task prepares a parallelization list of all zarr_urls that need to be\nused to calculate the registration between acquisitions (all zarr_urls\nexcept the reference acquisition vs. the reference acquisition).\nThis task only works for HCS OME-Zarrs for 2 reasons: Only HCS OME-Zarrs\ncurrently have defined acquisition metadata to determine reference\nacquisitions. And we have only implemented the grouping of images for\nHCS OME-Zarrs by well (with the assumption that every well just has 1\nimage per acqusition).\n## calculate_registration_image_based\nCalculate registration based on images\n\nThis task consists of 3 parts:\n\n1. Loading the images of a given ROI (=> loop over ROIs)\n2. Calculating the transformation for that ROI\n3. Storing the calculated transformation in the ROI table\n",
      "docs_link": "https://fractal-analytics-platform.github.io/fractal-tasks-core"
    },
    {
      "name": "Find Registration Consensus",
      "executable_non_parallel": "tasks/init_group_by_well_for_multiplexing.py",
      "executable_parallel": "tasks/find_registration_consensus.py",
      "meta_non_parallel": {
        "cpus_per_task": 1,
        "mem": 1000
      },
      "meta_parallel": {
        "cpus_per_task": 1,
        "mem": 1000
      },
      "args_schema_non_parallel": {
        "additionalProperties": false,
        "properties": {
          "zarr_urls": {
            "items": {
              "type": "string"
            },
            "title": "Zarr Urls",
            "type": "array",
            "description": "List of paths or urls to the individual OME-Zarr image to be processed. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "zarr_dir": {
            "title": "Zarr Dir",
            "type": "string",
            "description": "path of the directory where the new OME-Zarrs will be created. Not used by this task. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "reference_acquisition": {
            "default": 0,
            "title": "Reference Acquisition",
            "type": "integer",
            "description": "Which acquisition to register against. Uses the OME-NGFF HCS well metadata acquisition keys to find the reference acquisition."
          }
        },
        "required": [
          "zarr_urls",
          "zarr_dir"
        ],
        "type": "object",
        "title": "InitGroupByWellForMultiplexing"
      },
      "args_schema_parallel": {
        "$defs": {
          "InitArgsRegistrationConsensus": {
            "description": "Registration consensus init args.",
            "properties": {
              "zarr_url_list": {
                "items": {
                  "type": "string"
                },
                "title": "Zarr Url List",
                "type": "array"
              }
            },
            "required": [
              "zarr_url_list"
            ],
            "title": "InitArgsRegistrationConsensus",
            "type": "object"
          }
        },
        "additionalProperties": false,
        "properties": {
          "zarr_url": {
            "title": "Zarr Url",
            "type": "string",
            "description": "Path or url to the individual OME-Zarr image to be processed. Refers to the zarr_url of the reference acquisition. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "init_args": {
            "$ref": "#/$defs/InitArgsRegistrationConsensus",
            "title": "Init Args",
            "description": "Intialization arguments provided by `init_group_by_well_for_multiplexing`. It contains the zarr_url_list listing all the zarr_urls in the same well as the zarr_url of the reference acquisition that are being processed. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "roi_table": {
            "default": "FOV_ROI_table",
            "title": "Roi Table",
            "type": "string",
            "description": "Name of the ROI table over which the task loops to calculate the registration. Examples: `FOV_ROI_table` => loop over the field of views, `well_ROI_table` => process the whole well as one image."
          },
          "new_roi_table": {
            "title": "New Roi Table",
            "type": "string",
            "description": "Optional name for the new, registered ROI table. If no name is given, it will default to \"registered_\" + `roi_table`"
          }
        },
        "required": [
          "zarr_url",
          "init_args"
        ],
        "type": "object",
        "title": "FindRegistrationConsensus"
      },
      "docs_info": "## init_group_by_well_for_multiplexing\nFinds images for all acquisitions per well.\n\nReturns the parallelization_list to run `find_registration_consensus`.\n## find_registration_consensus\nApplies pre-calculated registration to ROI tables.\n\nApply pre-calculated registration such that resulting ROIs contain\nthe consensus align region between all acquisitions.\n\nParallelization level: well\n",
      "docs_link": "https://fractal-analytics-platform.github.io/fractal-tasks-core"
    },
    {
      "name": "Apply Registration to Image",
      "input_types": {
        "registered": false
      },
      "output_types": {
        "registered": true
      },
      "executable_parallel": "tasks/apply_registration_to_image.py",
      "meta_parallel": {
        "cpus_per_task": 1,
        "mem": 4000
      },
      "args_schema_parallel": {
        "additionalProperties": false,
        "properties": {
          "zarr_url": {
            "title": "Zarr Url",
            "type": "string",
            "description": "Path or url to the individual OME-Zarr image to be processed. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "registered_roi_table": {
            "title": "Registered Roi Table",
            "type": "string",
            "description": "Name of the ROI table which has been registered and will be applied to mask and shift the images. Examples: `registered_FOV_ROI_table` => loop over the field of views, `registered_well_ROI_table` => process the whole well as one image."
          },
          "reference_acquisition": {
            "default": 0,
            "title": "Reference Acquisition",
            "type": "integer",
            "description": "Which acquisition to register against. Uses the OME-NGFF HCS well metadata acquisition keys to find the reference acquisition."
          },
          "overwrite_input": {
            "default": true,
            "title": "Overwrite Input",
            "type": "boolean",
            "description": "Whether the old image data should be replaced with the newly registered image data. Currently only implemented for `overwrite_input=True`."
          }
        },
        "required": [
          "zarr_url",
          "registered_roi_table"
        ],
        "type": "object",
        "title": "ApplyRegistrationToImage"
      },
      "docs_info": "## apply_registration_to_image\nApply registration to images by using a registered ROI table\n\nThis task consists of 4 parts:\n\n1. Mask all regions in images that are not available in the\nregistered ROI table and store each acquisition aligned to the\nreference_acquisition (by looping over ROIs).\n2. Do the same for all label images.\n3. Copy all tables from the non-aligned image to the aligned image\n(currently only works well if the only tables are well & FOV ROI tables\n(registered and original). Not implemented for measurement tables and\nother ROI tables).\n4. Clean up: Delete the old, non-aligned image and rename the new,\naligned image to take over its place.\n",
      "docs_link": "https://fractal-analytics-platform.github.io/fractal-tasks-core"
    },
    {
      "name": "Import OME-Zarr",
      "executable_non_parallel": "tasks/import_ome_zarr.py",
      "args_schema_non_parallel": {
        "additionalProperties": false,
        "properties": {
          "zarr_urls": {
            "items": {
              "type": "string"
            },
            "title": "Zarr Urls",
            "type": "array",
            "description": "List of paths or urls to the individual OME-Zarr image to be processed. Not used. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "zarr_dir": {
            "title": "Zarr Dir",
            "type": "string",
            "description": "path of the directory where the new OME-Zarrs will be created. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "zarr_name": {
            "title": "Zarr Name",
            "type": "string",
            "description": "The OME-Zarr name, without its parent folder. The parent folder is provided by zarr_dir; e.g. `zarr_name=\"array.zarr\"`, if the OME-Zarr path is in `/zarr_dir/array.zarr`."
          },
          "update_omero_metadata": {
            "default": true,
            "title": "Update Omero Metadata",
            "type": "boolean",
            "description": "Whether to update Omero-channels metadata, to make them Fractal-compatible."
          },
          "add_image_ROI_table": {
            "default": true,
            "title": "Add Image Roi Table",
            "type": "boolean",
            "description": "Whether to add a `image_ROI_table` table to each image, with a single ROI covering the whole image."
          },
          "add_grid_ROI_table": {
            "default": true,
            "title": "Add Grid Roi Table",
            "type": "boolean",
            "description": "Whether to add a `grid_ROI_table` table to each image, with the image split into a rectangular grid of ROIs."
          },
          "grid_y_shape": {
            "default": 2,
            "title": "Grid Y Shape",
            "type": "integer",
            "description": "Y shape of the ROI grid in `grid_ROI_table`."
          },
          "grid_x_shape": {
            "default": 2,
            "title": "Grid X Shape",
            "type": "integer",
            "description": "X shape of the ROI grid in `grid_ROI_table`."
          },
          "overwrite": {
            "default": false,
            "title": "Overwrite",
            "type": "boolean",
            "description": "Whether new ROI tables (added when `add_image_ROI_table` and/or `add_grid_ROI_table` are `True`) can overwite existing ones."
          }
        },
        "required": [
          "zarr_urls",
          "zarr_dir",
          "zarr_name"
        ],
        "type": "object",
        "title": "ImportOmeZarr"
      },
      "docs_info": "## import_ome_zarr\nImport a single OME-Zarr into Fractal.\n\nThe single OME-Zarr can be a full OME-Zarr HCS plate or an individual\nOME-Zarr image. The image needs to be in the zarr_dir as specified by the\ndataset. The current version of this task:\n\n1. Creates the appropriate components-related metadata, needed for\n   processing an existing OME-Zarr through Fractal.\n2. Optionally adds new ROI tables to the existing OME-Zarr.\n",
      "docs_link": "https://fractal-analytics-platform.github.io/fractal-tasks-core"
    },
    {
      "name": "Napari Workflows Wrapper",
      "executable_parallel": "tasks/napari_workflows_wrapper.py",
      "meta_parallel": {
        "cpus_per_task": 8,
        "mem": 32000
      },
      "args_schema_parallel": {
        "$defs": {
          "ChannelInputModel": {
            "description": "A channel which is specified by either `wavelength_id` or `label`.",
            "properties": {
              "wavelength_id": {
                "title": "Wavelength Id",
                "type": "string"
              },
              "label": {
                "title": "Label",
                "type": "string"
              }
            },
            "title": "ChannelInputModel",
            "type": "object"
          },
          "NapariWorkflowsInput": {
            "description": "A value of the `input_specs` argument in `napari_workflows_wrapper`.",
            "properties": {
              "type": {
                "enum": [
                  "image",
                  "label"
                ],
                "title": "Type",
                "type": "string"
              },
              "label_name": {
                "title": "Label Name",
                "type": "string"
              },
              "channel": {
                "allOf": [
                  {
                    "$ref": "#/$defs/ChannelInputModel"
                  }
                ]
              }
            },
            "required": [
              "type"
            ],
            "title": "NapariWorkflowsInput",
            "type": "object"
          },
          "NapariWorkflowsOutput": {
            "description": "A value of the `output_specs` argument in `napari_workflows_wrapper`.",
            "properties": {
              "type": {
                "enum": [
                  "label",
                  "dataframe"
                ],
                "title": "Type",
                "type": "string"
              },
              "label_name": {
                "title": "Label Name",
                "type": "string"
              },
              "table_name": {
                "title": "Table Name",
                "type": "string"
              }
            },
            "required": [
              "type",
              "label_name"
            ],
            "title": "NapariWorkflowsOutput",
            "type": "object"
          }
        },
        "additionalProperties": false,
        "properties": {
          "zarr_url": {
            "title": "Zarr Url",
            "type": "string",
            "description": "Path or url to the individual OME-Zarr image to be processed. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "workflow_file": {
            "title": "Workflow File",
            "type": "string",
            "description": "Absolute path to napari-workflows YAML file"
          },
          "input_specs": {
            "additionalProperties": {
              "$ref": "#/$defs/NapariWorkflowsInput"
            },
            "title": "Input Specs",
            "type": "object",
            "description": "A dictionary of `NapariWorkflowsInput` values."
          },
          "output_specs": {
            "additionalProperties": {
              "$ref": "#/$defs/NapariWorkflowsOutput"
            },
            "title": "Output Specs",
            "type": "object",
            "description": "A dictionary of `NapariWorkflowsOutput` values."
          },
          "input_ROI_table": {
            "default": "FOV_ROI_table",
            "title": "Input Roi Table",
            "type": "string",
            "description": "Name of the ROI table over which the task loops to apply napari workflows. Examples: `FOV_ROI_table` => loop over the field of views; `organoid_ROI_table` => loop over the organoid ROI table (generated by another task); `well_ROI_table` => process the whole well as one image."
          },
          "level": {
            "default": 0,
            "title": "Level",
            "type": "integer",
            "description": "Pyramid level of the image to be used as input for napari-workflows. Choose `0` to process at full resolution. Levels > 0 are currently only supported for workflows that only have intensity images as input and only produce a label images as output."
          },
          "relabeling": {
            "default": true,
            "title": "Relabeling",
            "type": "boolean",
            "description": "If `True`, apply relabeling so that label values are unique across all ROIs in the well."
          },
          "expected_dimensions": {
            "default": 3,
            "title": "Expected Dimensions",
            "type": "integer",
            "description": "Expected dimensions (either `2` or `3`). Useful when loading 2D images that are stored in a 3D array with shape `(1, size_x, size_y)` [which is the default way Fractal stores 2D images], but you want to make sure the napari workflow gets a 2D array to process. Also useful to set to `2` when loading a 2D OME-Zarr that is saved as `(size_x, size_y)`."
          },
          "overwrite": {
            "default": true,
            "title": "Overwrite",
            "type": "boolean",
            "description": "If `True`, overwrite the task output."
          }
        },
        "required": [
          "zarr_url",
          "workflow_file",
          "input_specs",
          "output_specs"
        ],
        "type": "object",
        "title": "NapariWorkflowsWrapper"
      },
      "docs_info": "## napari_workflows_wrapper\nRun a napari-workflow on the ROIs of a single OME-NGFF image.\n\nThis task takes images and labels and runs a napari-workflow on them that\ncan produce a label and tables as output.\n\nExamples of allowed entries for `input_specs` and `output_specs`:\n\n```\ninput_specs = {\n    \"in_1\": {\"type\": \"image\", \"channel\": {\"wavelength_id\": \"A01_C02\"}},\n    \"in_2\": {\"type\": \"image\", \"channel\": {\"label\": \"DAPI\"}},\n    \"in_3\": {\"type\": \"label\", \"label_name\": \"label_DAPI\"},\n}\n\noutput_specs = {\n    \"out_1\": {\"type\": \"label\", \"label_name\": \"label_DAPI_new\"},\n    \"out_2\": {\"type\": \"dataframe\", \"table_name\": \"measurements\"},\n}\n```\n",
      "docs_link": "https://fractal-analytics-platform.github.io/fractal-tasks-core"
    }
  ],
  "has_args_schemas": true,
  "args_schema_version": "pydantic_v2"
}
