{
  "args_schema_version": "pydantic_v1",
  "has_args_schema": true,
  "has_args_schemas": true,
  "manifest_version": "1",
  "task_list": [
    {
      "args_schema": {
        "title": "CreateOmeZarr",
        "type": "object",
        "properties": {
          "input_paths": {
            "title": "Input Paths",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of input paths where the image data from the microscope is stored (as TIF or PNG). Should point to the parent folder containing the images and the metadata files ``MeasurementData.mlf`` and ``MeasurementDetail.mrf`` (if present). Example: ``[\"/some/path/\"]`` (standard argument for Fractal tasks, managed by Fractal server)"
          },
          "output_path": {
            "title": "Output Path",
            "type": "string",
            "description": "Path were the output of this task is stored. Example: \"/some/path/\" => puts the new OME-Zarr file in the \"/some/path/\" (standard argument for Fractal tasks, managed by Fractal server)"
          },
          "metadata": {
            "title": "Metadata",
            "type": "object",
            "description": "This parameter is not used by this task (standard argument for Fractal tasks, managed by Fractal server)"
          },
          "allowed_channels": {
            "title": "Allowed Channels",
            "type": "array",
            "items": {
              "$ref": "#/definitions/OmeroChannel"
            },
            "description": "A list of ``OmeroChannel`` s, where each channel must include the ``wavelength_id`` attribute and where the ``wavelength_id`` values must be unique across the list."
          },
          "image_glob_patterns": {
            "title": "Image Glob Patterns",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "If specified, only parse images with filenames that match with all these patterns. Patterns must be defined as in https://docs.python.org/3/library/fnmatch.html, Example: ``image_glob_pattern=[\"*_B03_*\"]`` => only process well B03 ``image_glob_pattern=[\"*_C09_*\", \"*F016*\", \"*Z[0-5][0-9]C*\"]`` => only process well C09, field of view 16 and Z planes 0 - 59."
          },
          "num_levels": {
            "title": "Num Levels",
            "default": 5,
            "type": "integer",
            "description": "Number of resolution-pyramid levels. If set to 5, there will be the full-resolution level and 4 levels of downsampled images."
          },
          "coarsening_xy": {
            "title": "Coarsening Xy",
            "default": 2,
            "type": "integer",
            "description": "Linear coarsening factor between subsequent levels. If set to 2, level 1 is 2x downsampled, level 2 is 4x downsampled etc."
          },
          "image_extension": {
            "title": "Image Extension",
            "default": "tif",
            "type": "string",
            "description": "Filename extension of images (e.g. ``\"tif\"`` or ``\"png\"``)"
          },
          "metadata_table_file": {
            "title": "Metadata Table File",
            "type": "string",
            "description": "If ``None``, parse Yokogawa metadata from mrf/mlf files in the input_path folder; else, the full path to a csv file containing the parsed metadata table."
          }
        },
        "required": [
          "input_paths",
          "output_path",
          "metadata",
          "allowed_channels"
        ],
        "additionalProperties": false,
        "definitions": {
          "Window": {
            "title": "Window",
            "description": "Custom class for Omero-channel window, based on OME-NGFF v0.4.",
            "type": "object",
            "properties": {
              "min": {
                "title": "Min",
                "type": "integer",
                "description": "Do not change. It will be set to ``0`` by default."
              },
              "max": {
                "title": "Max",
                "type": "integer",
                "description": "Do not change. It will be set according to bit-depth of the images by default (e.g. 65535 for 16 bit images)."
              },
              "start": {
                "title": "Start",
                "type": "integer",
                "description": "Lower-bound rescaling value for visualization."
              },
              "end": {
                "title": "End",
                "type": "integer",
                "description": "Upper-bound rescaling value for visualization."
              }
            },
            "required": [
              "start",
              "end"
            ]
          },
          "OmeroChannel": {
            "title": "OmeroChannel",
            "description": "Custom class for Omero channels, based on OME-NGFF v0.4.",
            "type": "object",
            "properties": {
              "wavelength_id": {
                "title": "Wavelength Id",
                "type": "string",
                "description": "Unique ID for the channel wavelength, e.g. ``A01_C01``."
              },
              "index": {
                "title": "Index",
                "type": "integer",
                "description": "Do not change. For internal use only."
              },
              "label": {
                "title": "Label",
                "type": "string",
                "description": "Name of the channel"
              },
              "window": {
                "$ref": "#/definitions/Window",
                "title": "Window",
                "description": "Optional ``Window`` object to set default display settings for napari."
              },
              "color": {
                "title": "Color",
                "type": "string",
                "description": "Optional hex colormap to display the channel in napari (e.g. ``00FFFF``)."
              },
              "active": {
                "title": "Active",
                "default": true,
                "type": "boolean",
                "description": "Should this channel be shown in the viewer?"
              },
              "coefficient": {
                "title": "Coefficient",
                "default": 1,
                "type": "integer",
                "description": "Do not change. Omero-channel attribute. "
              },
              "inverted": {
                "title": "Inverted",
                "default": false,
                "type": "boolean",
                "description": "Do not change. Omero-channel attribute."
              }
            },
            "required": [
              "wavelength_id"
            ]
          }
        }
      },
      "executable": "tasks/create_ome_zarr.py",
      "input_type": "image",
      "meta": {
        "cpus_per_task": 1,
        "mem": 4000
      },
      "name": "Create OME-Zarr structure",
      "output_type": "zarr"
    },
    {
      "args_schema": {
        "title": "YokogawaToOmeZarr",
        "type": "object",
        "properties": {
          "input_paths": {
            "title": "Input Paths",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of input paths where the OME-Zarrs. Should point to the parent folder containing one or many OME-Zarr files, not the actual OME-Zarr file. Example: [\"/some/path/\"] This task only supports a single input path. (standard argument for Fractal tasks, managed by Fractal server)"
          },
          "output_path": {
            "title": "Output Path",
            "type": "string",
            "description": "Unclear. Should be the same as input_path. (standard argument for Fractal tasks, managed by Fractal server)"
          },
          "component": {
            "title": "Component",
            "type": "string",
            "description": "Path to the OME-Zarr image in the OME-Zarr plate that is processed. Example: \"some_plate.zarr/B/03/0\" (standard argument for Fractal tasks, managed by Fractal server)"
          },
          "metadata": {
            "title": "Metadata",
            "type": "object",
            "description": "dictionary containing metadata about the OME-Zarr. This task requires the following elements to be present in the metadata: \"original_paths\": list of paths that correspond to the ``input_paths`` of the create_ome_zarr task (=> where the microscopy image are stored) \"num_levels\": int, number of pyramid levels in the image. This determines how many pyramid levels are built for the segmentation. \"coarsening_xy\": int, coarsening factor in XY of the downsampling when building the pyramid. \"image_extension\": Filename extension of images (e.g. ``\"tif\"`` or ``\"png\"``) \"image_glob_patterns\": Parameter of ``create_ome_zarr`` task. If specified, only parse images with filenames that match with all these patterns. (standard argument for Fractal tasks, managed by Fractal server)"
          }
        },
        "required": [
          "input_paths",
          "output_path",
          "component",
          "metadata"
        ],
        "additionalProperties": false
      },
      "executable": "tasks/yokogawa_to_ome_zarr.py",
      "input_type": "zarr",
      "meta": {
        "cpus_per_task": 1,
        "mem": 4000,
        "parallelization_level": "image"
      },
      "name": "Convert Yokogawa to OME-Zarr",
      "output_type": "zarr"
    },
    {
      "args_schema": {
        "title": "CopyOmeZarr",
        "type": "object",
        "properties": {
          "input_paths": {
            "title": "Input Paths",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of input paths where the image data is stored as OME-Zarrs. Should point to the parent folder containing one or many OME-Zarr files, not the actual OME-Zarr file. Example: [\"/some/path/\"] This task only supports a single input path. (standard argument for Fractal tasks, managed by Fractal server)"
          },
          "output_path": {
            "title": "Output Path",
            "type": "string",
            "description": "Path were the output of this task is stored. Example: \"/some/path/\" => puts the new OME-Zarr file in the same folder as the input OME-Zarr file \"/some/new_path\" => puts the new OME-Zarr file into a new folder at ``/some/new_path`` (standard argument for Fractal tasks, managed by Fractal server)"
          },
          "metadata": {
            "title": "Metadata",
            "type": "object",
            "description": "dictionary containing metadata about the OME-Zarr. This task requires the following elements to be present in the metadata: \"plate\": List of plates. Example: [\"MyPlate.zarr\"] \"well\": List of wells in the OME-Zarr plate. [\"MyPlate.zarr/B/03\", \"MyPlate.zarr/B/05\"] \"image\": List of images in the OME-Zarr plate. Example: [\"MyPlate.zarr/B/03/0\", \"MyPlate.zarr/B/05/0\"] (standard argument for Fractal tasks, managed by Fractal server)"
          },
          "project_to_2D": {
            "title": "Project To 2D",
            "default": true,
            "type": "boolean",
            "description": "If ``True``, apply a 3D->2D projection to the ROI tables that are copied to the new OME-Zarr."
          },
          "suffix": {
            "title": "Suffix",
            "default": "mip",
            "type": "string",
            "description": "The suffix that is used to transform ``plate.zarr`` into ``plate_suffix.zarr``. Note that `None` is not currently supported."
          },
          "ROI_table_names": {
            "title": "Roi Table Names",
            "default": [
              "FOV_ROI_table",
              "well_ROI_table"
            ],
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of Anndata table names to be copied. Note: copying non-ROI tables may fail if ``project_to_2D=True``."
          }
        },
        "required": [
          "input_paths",
          "output_path",
          "metadata"
        ],
        "additionalProperties": false
      },
      "executable": "tasks/copy_ome_zarr.py",
      "input_type": "zarr",
      "meta": {
        "cpus_per_task": 1,
        "mem": 1000
      },
      "name": "Copy OME-Zarr structure",
      "output_type": "zarr"
    },
    {
      "args_schema": {
        "title": "MaximumIntensityProjection",
        "type": "object",
        "properties": {
          "input_paths": {
            "title": "Input Paths",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "This parameter is not used by this task This task only supports a single input path. (standard argument for Fractal tasks, managed by Fractal server)"
          },
          "output_path": {
            "title": "Output Path",
            "type": "string",
            "description": "Path were the output of this task is stored. Example: \"/some/path/\" => puts the new OME-Zarr file in that folder (standard argument for Fractal tasks, managed by Fractal server)"
          },
          "component": {
            "title": "Component",
            "type": "string",
            "description": "Path to the OME-Zarr image in the OME-Zarr plate that is processed. Component is typically changed by the copy_ome_zarr task before to point to a new mip Zarr file. Example: \"some_plate_mip.zarr/B/03/0\" (standard argument for Fractal tasks, managed by Fractal server)"
          },
          "metadata": {
            "title": "Metadata",
            "type": "object",
            "description": "dictionary containing metadata about the OME-Zarr. This task requires the following elements to be present in the metadata: \"num_levels\": int, number of pyramid levels in the image. This determines how many pyramid levels are built for the segmentation. \"coarsening_xy\": int, coarsening factor in XY of the downsampling when building the pyramid. \"plate\": List of plates. Example: [\"MyPlate.zarr\"] \"well\": List of wells in the OME-Zarr plate. [\"MyPlate.zarr/B/03\", \"MyPlate.zarr/B/05\"] \"image\": List of images in the OME-Zarr plate. Example: [\"MyPlate.zarr/B/03/0\", \"MyPlate.zarr/B/05/0\"] (standard argument for Fractal tasks, managed by Fractal server)"
          }
        },
        "required": [
          "input_paths",
          "output_path",
          "component",
          "metadata"
        ],
        "additionalProperties": false
      },
      "executable": "tasks/maximum_intensity_projection.py",
      "input_type": "zarr",
      "meta": {
        "cpus_per_task": 1,
        "mem": 4000,
        "parallelization_level": "image"
      },
      "name": "Maximum Intensity Projection",
      "output_type": "zarr"
    },
    {
      "args_schema": {
        "title": "CellposeSegmentation",
        "type": "object",
        "properties": {
          "input_paths": {
            "title": "Input Paths",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of input paths where the image data is stored as OME-Zarrs. Should point to the parent folder containing one or many OME-Zarr files, not the actual OME-Zarr file. Example: [\"/some/path/\"] This task only supports a single input path. (standard argument for Fractal tasks, managed by Fractal server)"
          },
          "output_path": {
            "title": "Output Path",
            "type": "string",
            "description": "This parameter is not used by this task (standard argument for Fractal tasks, managed by Fractal server)"
          },
          "component": {
            "title": "Component",
            "type": "string",
            "description": "Path to the OME-Zarr image in the OME-Zarr plate that is processed. Example: \"some_plate.zarr/B/03/0\" (standard argument for Fractal tasks, managed by Fractal server)"
          },
          "metadata": {
            "title": "Metadata",
            "type": "object",
            "description": "dictionary containing metadata about the OME-Zarr. This task requires the following elements to be present in the metadata: \"num_levels\": int, number of pyramid levels in the image. This determines how many pyramid levels are built for the segmentation. \"coarsening_xy\": int, coarsening factor in XY of the downsampling when building the pyramid. (standard argument for Fractal tasks, managed by Fractal server)"
          },
          "level": {
            "title": "Level",
            "type": "integer",
            "description": "Pyramid level of the image to be segmented. Choose 0 to process at full resolution."
          },
          "channel": {
            "$ref": "#/definitions/Channel",
            "title": "Channel",
            "description": "Primary channel for segmentation; requires either ``wavelength_id`` (e.g. ``A01_C01``) or ``label`` (e.g. ``DAPI``)."
          },
          "channel2": {
            "$ref": "#/definitions/Channel",
            "title": "Channel2",
            "description": "Second channel for segmentation (in the same format as ``channel``). If specified, cellpose runs in dual channel mode. For dual channel segmentation of cells, the first channel should contain the membrane marker, the second channel should contain the nuclear marker."
          },
          "input_ROI_table": {
            "title": "Input Roi Table",
            "default": "FOV_ROI_table",
            "type": "string",
            "description": "Name of the ROI table over which the task loops to apply Cellpose segmentation. Example: \"FOV_ROI_table\" => loop over the field of views \"organoid_ROI_table\" => loop over the organoid ROI table generated by another task \"well_ROI_table\" => process the whole well as one image"
          },
          "output_ROI_table": {
            "title": "Output Roi Table",
            "type": "string",
            "description": "If provided, a ROI table with that name is created, which will contain the bounding boxes of the newly segmented labels. ROI tables should have ``ROI`` in their name."
          },
          "output_label_name": {
            "title": "Output Label Name",
            "type": "string",
            "description": "Name of the output label image (e.g. ``\"organoids\"``)."
          },
          "use_masks": {
            "title": "Use Masks",
            "default": true,
            "type": "boolean",
            "description": "If ``True``, try to use masked loading and fall back to ``use_masks=False`` if the ROI table is not suitable. Masked loading is relevant when only a subset of the bounding box should actually be processed (e.g. running within organoid_ROI_table)."
          },
          "relabeling": {
            "title": "Relabeling",
            "default": true,
            "type": "boolean",
            "description": "If ``True``, apply relabeling so that label values are unique for all objects in the well."
          },
          "diameter_level0": {
            "title": "Diameter Level0",
            "default": 30.0,
            "type": "number",
            "description": "Expected diameter of the objects that should be segmented in pixels at level 0. Initial diameter is rescaled using the ``level`` that was selected. The rescaled value is passed as the diameter to the ``CellposeModel.eval`` method."
          },
          "model_type": {
            "title": "Model Type",
            "default": "cyto2",
            "type": "string",
            "description": "Parameter of ``CellposeModel`` class. Defines which model should be used. Typical choices are nuclei, cyto, cyto2 etc."
          },
          "pretrained_model": {
            "title": "Pretrained Model",
            "type": "string",
            "description": "Parameter of ``CellposeModel`` class (takes precedence over ``model_type``). Allows you to specify the path of a custom trained cellpose model."
          },
          "cellprob_threshold": {
            "title": "Cellprob Threshold",
            "default": 0.0,
            "type": "number",
            "description": "Parameter of ``CellposeModel.eval`` method. Valid values between -6 to 6. From Cellpose documentation: \"Decrease this threshold if cellpose is not returning as many ROIs as you\u2019d expect. Similarly, increase this threshold if cellpose is returning too ROIs particularly from dim areas.\""
          },
          "flow_threshold": {
            "title": "Flow Threshold",
            "default": 0.4,
            "type": "number",
            "description": "Parameter of ``CellposeModel.eval`` method. Valid values between 0.0 and 1.0. From Cellpose documentation: \"Increase this threshold if cellpose is not returning as many ROIs as you\u2019d expect. Similarly, decrease this threshold if cellpose is returning too many ill-shaped ROIs.\""
          },
          "anisotropy": {
            "title": "Anisotropy",
            "type": "number",
            "description": "Ratio of the pixel sizes along Z and XY axis (ignored if the image is not three-dimensional). If `None`, it is inferred from the OME-NGFF metadata."
          },
          "min_size": {
            "title": "Min Size",
            "default": 15,
            "type": "integer",
            "description": "Parameter of ``CellposeModel`` class. Minimum size of the segmented objects (in pixels). Use -1 to turn off the size filter."
          },
          "augment": {
            "title": "Augment",
            "default": false,
            "type": "boolean",
            "description": "Parameter of ``CellposeModel`` class. Whether to use cellpose augmentation to tile images with overlap."
          },
          "net_avg": {
            "title": "Net Avg",
            "default": false,
            "type": "boolean",
            "description": "Parameter of ``CellposeModel`` class. Whether to use cellpose net averaging to run the 4 built-in networks (useful for nuclei, cyto & cyto2, not sure it works for the others)."
          },
          "use_gpu": {
            "title": "Use Gpu",
            "default": true,
            "type": "boolean",
            "description": "If ``False``, always use the CPU; if ``True``, use the GPU if possible (as defined in ``cellpose.core.use_gpu()``) and fall-back to the CPU otherwise."
          }
        },
        "required": [
          "input_paths",
          "output_path",
          "component",
          "metadata",
          "level",
          "channel"
        ],
        "additionalProperties": false,
        "definitions": {
          "Channel": {
            "title": "Channel",
            "description": "A channel which is specified by either ``wavelength_id`` or ``label``.",
            "type": "object",
            "properties": {
              "wavelength_id": {
                "title": "Wavelength Id",
                "type": "string",
                "description": "Unique ID for the channel wavelength, e.g. ``A01_C01``."
              },
              "label": {
                "title": "Label",
                "type": "string",
                "description": "Name of the channel"
              }
            }
          }
        }
      },
      "executable": "tasks/cellpose_segmentation.py",
      "input_type": "zarr",
      "meta": {
        "cpus_per_task": 4,
        "mem": 16000,
        "needs_gpu": true,
        "parallelization_level": "image"
      },
      "name": "Cellpose Segmentation",
      "output_type": "zarr"
    },
    {
      "args_schema": {
        "title": "IlluminationCorrection",
        "type": "object",
        "properties": {
          "input_paths": {
            "title": "Input Paths",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of input paths where the image data is stored as OME-Zarrs. Should point to the parent folder containing one or many OME-Zarr files, not the actual OME-Zarr file. Example: [\"/some/path/\"] This task only supports a single input path. (standard argument for Fractal tasks, managed by Fractal server)"
          },
          "output_path": {
            "title": "Output Path",
            "type": "string",
            "description": "Path were the output of this task is stored. Example: \"/some/path/\" => puts the new OME-Zarr file in the same folder as the input OME-Zarr file \"/some/new_path\" => puts the new OME-Zarr file into a new folder at ``/some/new_path`` (standard argument for Fractal tasks, managed by Fractal server)"
          },
          "component": {
            "title": "Component",
            "type": "string",
            "description": "Path to the OME-Zarr image in the OME-Zarr plate that is processed. Example: \"some_plate.zarr/B/03/0\" (standard argument for Fractal tasks, managed by Fractal server)"
          },
          "metadata": {
            "title": "Metadata",
            "type": "object",
            "description": "dictionary containing metadata about the OME-Zarr. This task requires the following elements to be present in the metadata: \"num_levels\": int, number of pyramid levels in the image. This determines how many pyramid levels are built for the segmentation. \"coarsening_xy\": int, coarsening factor in XY of the downsampling when building the pyramid. (standard argument for Fractal tasks, managed by Fractal server)"
          },
          "illumination_profiles_folder": {
            "title": "Illumination Profiles Folder",
            "type": "string",
            "description": "Path of folder of illumination profiles."
          },
          "dict_corr": {
            "title": "Dict Corr",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Dictionary where keys match the ``wavelength_id`` attributes of existing channels (e.g. ``A01_C01`` ) and values are the filenames of the corresponding illumination profiles."
          },
          "background": {
            "title": "Background",
            "default": 110,
            "type": "integer",
            "description": "Background value that is subtracted from the image before the illumination correction is applied. Set it to 0 if you don't want any background subtraction."
          },
          "overwrite": {
            "title": "Overwrite",
            "default": true,
            "type": "boolean",
            "description": "If True, the results of this task will overwrite the input image data. This task is only implemented for ``overwrite=True`` at the moment."
          },
          "new_component": {
            "title": "New Component",
            "type": "string",
            "description": "Not implemented yet. This is not implemented well in Fractal server at the moment, it's unclear how a user would specify fitting new components. If the results shall not overwrite the input data and the output path is the same as the input path, a new component needs to be provided. Example: myplate_new_name.zarr/B/03/0/"
          }
        },
        "required": [
          "input_paths",
          "output_path",
          "component",
          "metadata",
          "illumination_profiles_folder",
          "dict_corr"
        ],
        "additionalProperties": false
      },
      "executable": "tasks/illumination_correction.py",
      "input_type": "zarr",
      "meta": {
        "cpus_per_task": 1,
        "mem": 4000,
        "parallelization_level": "image"
      },
      "name": "Illumination correction",
      "output_type": "zarr"
    },
    {
      "args_schema": {
        "title": "NapariWorkflowsWrapper",
        "type": "object",
        "properties": {
          "input_paths": {
            "title": "Input Paths",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of input paths where the image data is stored as OME-Zarrs. Should point to the parent folder containing one or many OME-Zarr files, not the actual OME-Zarr file. Example: [\"/some/path/\"] This task only supports a single input path. (standard argument for Fractal tasks, managed by Fractal server)"
          },
          "output_path": {
            "title": "Output Path",
            "type": "string",
            "description": "This parameter is not used by this task (standard argument for Fractal tasks, managed by Fractal server)"
          },
          "component": {
            "title": "Component",
            "type": "string",
            "description": "Path to the OME-Zarr image in the OME-Zarr plate that is processed. Example: \"some_plate.zarr/B/03/0\" (standard argument for Fractal tasks, managed by Fractal server)"
          },
          "metadata": {
            "title": "Metadata",
            "type": "object",
            "description": "dictionary containing metadata about the OME-Zarr. This task requires the following elements to be present in the metadata: \"num_levels\": int, number of pyramid levels in the image. This determines how many pyramid levels are built for the segmentation. \"coarsening_xy\": int, coarsening factor in XY of the downsampling when building the pyramid. (standard argument for Fractal tasks, managed by Fractal server)"
          },
          "workflow_file": {
            "title": "Workflow File",
            "type": "string",
            "description": "Absolute path to napari-workflows YAML file"
          },
          "input_specs": {
            "title": "Input Specs",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/definitions/NapariWorkflowsInput"
            },
            "description": "A dictionary of ``NapariWorkflowsInput`` values."
          },
          "output_specs": {
            "title": "Output Specs",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/definitions/NapariWorkflowsOutput"
            },
            "description": "A dictionary of ``NapariWorkflowsOutput`` values."
          },
          "input_ROI_table": {
            "title": "Input Roi Table",
            "default": "FOV_ROI_table",
            "type": "string",
            "description": "Name of the ROI table over which the task loops to apply napari workflows. Example: \"FOV_ROI_table\" => loop over the field of views \"organoid_ROI_table\" => loop over the organoid ROI table generated by another task \"well_ROI_table\" => process the whole well as one image"
          },
          "level": {
            "title": "Level",
            "default": 0,
            "type": "integer",
            "description": "Pyramid level of the image to be used as input for napari-workflows. Choose 0 to process at full resolution. Levels > 0 are currently only supported for workflows that only have intensity images as input and only produce a label images as output."
          },
          "relabeling": {
            "title": "Relabeling",
            "default": true,
            "type": "boolean",
            "description": "If ``True``, apply relabeling so that label values are unique across all ROIs in the well."
          },
          "expected_dimensions": {
            "title": "Expected Dimensions",
            "default": 3,
            "type": "integer",
            "description": "Expected dimensions (either 2 or 3). Useful when loading 2D images that are stored in a 3D array as (1, size_x, size_y) [which is the default way Fractal stored 2D images], but you want to make sure the napari workflow gets a 2D array to process. Also useful to set to 2 when loading a 2D OME-Zarr that is saved as (size_x, size_y)."
          }
        },
        "required": [
          "input_paths",
          "output_path",
          "component",
          "metadata",
          "workflow_file",
          "input_specs",
          "output_specs"
        ],
        "additionalProperties": false,
        "definitions": {
          "Channel": {
            "title": "Channel",
            "description": "A channel which is specified by either ``wavelength_id`` or ``label``.",
            "type": "object",
            "properties": {
              "wavelength_id": {
                "title": "Wavelength Id",
                "type": "string",
                "description": "Unique ID for the channel wavelength, e.g. ``A01_C01``."
              },
              "label": {
                "title": "Label",
                "type": "string",
                "description": "Name of the channel"
              }
            }
          },
          "NapariWorkflowsInput": {
            "title": "NapariWorkflowsInput",
            "description": "A value of the ``input_specs`` argument in ``napari_workflows_wrapper``.",
            "type": "object",
            "properties": {
              "type": {
                "title": "Type",
                "enum": [
                  "image",
                  "label"
                ],
                "type": "string",
                "description": "Input type (supported: ``image`` or ``label``)."
              },
              "label_name": {
                "title": "Label Name",
                "type": "string",
                "description": "Label name (for label inputs only)."
              },
              "channel": {
                "$ref": "#/definitions/Channel",
                "title": "Channel",
                "description": "Channel object (for image inputs only)."
              }
            },
            "required": [
              "type"
            ]
          },
          "NapariWorkflowsOutput": {
            "title": "NapariWorkflowsOutput",
            "description": "A value of the ``output_specs`` argument in ``napari_workflows_wrapper``.",
            "type": "object",
            "properties": {
              "type": {
                "title": "Type",
                "enum": [
                  "label",
                  "dataframe"
                ],
                "type": "string",
                "description": "Output type (supported: ``label`` or ``dataframe``)."
              },
              "label_name": {
                "title": "Label Name",
                "type": "string",
                "description": "Label name (for label outputs only)."
              },
              "table_name": {
                "title": "Table Name",
                "type": "string",
                "description": "Table name (for dataframe outputs only)."
              }
            },
            "required": [
              "type"
            ]
          }
        }
      },
      "executable": "tasks/napari_workflows_wrapper.py",
      "input_type": "zarr",
      "meta": {
        "cpus_per_task": 8,
        "mem": 32000,
        "parallelization_level": "image"
      },
      "name": "Napari workflows wrapper",
      "output_type": "zarr"
    },
    {
      "args_schema": {
        "title": "CreateOmeZarrMultiplex",
        "type": "object",
        "properties": {
          "input_paths": {
            "title": "Input Paths",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of input paths where the image data from the microscope is stored (as TIF or PNG). Each element of the list is treated as another cycle of the multiplexing data, the cycles are ordered by their order in this list. Should point to the parent folder containing the images and the metadata files ``MeasurementData.mlf`` and ``MeasurementDetail.mrf`` (if present). Example: ``[\"/path/cycle1/\", \"/path/cycle2/\"]`` (standard argument for Fractal tasks, managed by Fractal server)"
          },
          "output_path": {
            "title": "Output Path",
            "type": "string",
            "description": "Path were the output of this task is stored. Example: \"/some/path/\" => puts the new OME-Zarr file in the \"/some/path/\" (standard argument for Fractal tasks, managed by Fractal server)"
          },
          "metadata": {
            "title": "Metadata",
            "type": "object",
            "description": "This parameter is not used by this task (standard argument for Fractal tasks, managed by Fractal server)"
          },
          "allowed_channels": {
            "title": "Allowed Channels",
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OmeroChannel"
              }
            },
            "description": "A dictionary of lists of ``OmeroChannel``s, where each channel must include the ``wavelength_id`` attribute and where the ``wavelength_id`` values must be unique across each list. Dictionary keys represent channel indices (``\"0\",\"1\",..``)."
          },
          "image_glob_patterns": {
            "title": "Image Glob Patterns",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "If specified, only parse images with filenames that match with all these patterns. Patterns must be defined as in https://docs.python.org/3/library/fnmatch.html, Example: ``image_glob_pattern=[\"*_B03_*\"]`` => only process well B03 ``image_glob_pattern=[\"*_C09_*\", \"*F016*\", \"*Z[0-5][0-9]C*\"]`` => only process well C09, field of view 16 and Z planes 0 - 59."
          },
          "num_levels": {
            "title": "Num Levels",
            "default": 5,
            "type": "integer",
            "description": "Number of resolution-pyramid levels. If set to 5, there will be the full-resolution level and 4 levels of downsampled images."
          },
          "coarsening_xy": {
            "title": "Coarsening Xy",
            "default": 2,
            "type": "integer",
            "description": "Linear coarsening factor between subsequent levels. If set to 2, level 1 is 2x downsampled, level 2 is 4x downsampled etc."
          },
          "image_extension": {
            "title": "Image Extension",
            "default": "tif",
            "type": "string",
            "description": "Filename extension of images (e.g. `\"tif\"` or `\"png\"`)"
          },
          "metadata_table_files": {
            "title": "Metadata Table Files",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "If ``None``, parse Yokogawa metadata from mrf/mlf files in the input_path folder; else, a dictionary of key-value pairs like ``(acquisition, path)`` with ``acquisition`` a string and ``path`` pointing to a csv file containing the parsed metadata table."
          }
        },
        "required": [
          "input_paths",
          "output_path",
          "metadata",
          "allowed_channels"
        ],
        "additionalProperties": false,
        "definitions": {
          "Window": {
            "title": "Window",
            "description": "Custom class for Omero-channel window, based on OME-NGFF v0.4.",
            "type": "object",
            "properties": {
              "min": {
                "title": "Min",
                "type": "integer",
                "description": "Do not change. It will be set to ``0`` by default."
              },
              "max": {
                "title": "Max",
                "type": "integer",
                "description": "Do not change. It will be set according to bit-depth of the images by default (e.g. 65535 for 16 bit images)."
              },
              "start": {
                "title": "Start",
                "type": "integer",
                "description": "Lower-bound rescaling value for visualization."
              },
              "end": {
                "title": "End",
                "type": "integer",
                "description": "Upper-bound rescaling value for visualization."
              }
            },
            "required": [
              "start",
              "end"
            ]
          },
          "OmeroChannel": {
            "title": "OmeroChannel",
            "description": "Custom class for Omero channels, based on OME-NGFF v0.4.",
            "type": "object",
            "properties": {
              "wavelength_id": {
                "title": "Wavelength Id",
                "type": "string",
                "description": "Unique ID for the channel wavelength, e.g. ``A01_C01``."
              },
              "index": {
                "title": "Index",
                "type": "integer",
                "description": "Do not change. For internal use only."
              },
              "label": {
                "title": "Label",
                "type": "string",
                "description": "Name of the channel"
              },
              "window": {
                "$ref": "#/definitions/Window",
                "title": "Window",
                "description": "Optional ``Window`` object to set default display settings for napari."
              },
              "color": {
                "title": "Color",
                "type": "string",
                "description": "Optional hex colormap to display the channel in napari (e.g. ``00FFFF``)."
              },
              "active": {
                "title": "Active",
                "default": true,
                "type": "boolean",
                "description": "Should this channel be shown in the viewer?"
              },
              "coefficient": {
                "title": "Coefficient",
                "default": 1,
                "type": "integer",
                "description": "Do not change. Omero-channel attribute. "
              },
              "inverted": {
                "title": "Inverted",
                "default": false,
                "type": "boolean",
                "description": "Do not change. Omero-channel attribute."
              }
            },
            "required": [
              "wavelength_id"
            ]
          }
        }
      },
      "executable": "tasks/create_ome_zarr_multiplex.py",
      "input_type": "image",
      "meta": {
        "cpus_per_task": 1,
        "mem": 4000
      },
      "name": "Create OME-ZARR structure (multiplexing)",
      "output_type": "zarr"
    }
  ]
}
